// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/estimate"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/forecast"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/predicate"
)

// ForecastUpdate is the builder for updating Forecast entities.
type ForecastUpdate struct {
	config
	hooks    []Hook
	mutation *ForecastMutation
}

// Where appends a list predicates to the ForecastUpdate builder.
func (fu *ForecastUpdate) Where(ps ...predicate.Forecast) *ForecastUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetTitle sets the "title" field.
func (fu *ForecastUpdate) SetTitle(s string) *ForecastUpdate {
	fu.mutation.SetTitle(s)
	return fu
}

// SetDescription sets the "description" field.
func (fu *ForecastUpdate) SetDescription(s string) *ForecastUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableDescription(s *string) *ForecastUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// SetCreated sets the "created" field.
func (fu *ForecastUpdate) SetCreated(t time.Time) *ForecastUpdate {
	fu.mutation.SetCreated(t)
	return fu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableCreated(t *time.Time) *ForecastUpdate {
	if t != nil {
		fu.SetCreated(*t)
	}
	return fu
}

// SetResolves sets the "resolves" field.
func (fu *ForecastUpdate) SetResolves(t time.Time) *ForecastUpdate {
	fu.mutation.SetResolves(t)
	return fu
}

// SetCloses sets the "closes" field.
func (fu *ForecastUpdate) SetCloses(t time.Time) *ForecastUpdate {
	fu.mutation.SetCloses(t)
	return fu
}

// SetNillableCloses sets the "closes" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableCloses(t *time.Time) *ForecastUpdate {
	if t != nil {
		fu.SetCloses(*t)
	}
	return fu
}

// ClearCloses clears the value of the "closes" field.
func (fu *ForecastUpdate) ClearCloses() *ForecastUpdate {
	fu.mutation.ClearCloses()
	return fu
}

// SetResolution sets the "resolution" field.
func (fu *ForecastUpdate) SetResolution(f forecast.Resolution) *ForecastUpdate {
	fu.mutation.SetResolution(f)
	return fu
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (fu *ForecastUpdate) SetNillableResolution(f *forecast.Resolution) *ForecastUpdate {
	if f != nil {
		fu.SetResolution(*f)
	}
	return fu
}

// AddEstimateIDs adds the "estimates" edge to the Estimate entity by IDs.
func (fu *ForecastUpdate) AddEstimateIDs(ids ...int) *ForecastUpdate {
	fu.mutation.AddEstimateIDs(ids...)
	return fu
}

// AddEstimates adds the "estimates" edges to the Estimate entity.
func (fu *ForecastUpdate) AddEstimates(e ...*Estimate) *ForecastUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.AddEstimateIDs(ids...)
}

// Mutation returns the ForecastMutation object of the builder.
func (fu *ForecastUpdate) Mutation() *ForecastMutation {
	return fu.mutation
}

// ClearEstimates clears all "estimates" edges to the Estimate entity.
func (fu *ForecastUpdate) ClearEstimates() *ForecastUpdate {
	fu.mutation.ClearEstimates()
	return fu
}

// RemoveEstimateIDs removes the "estimates" edge to Estimate entities by IDs.
func (fu *ForecastUpdate) RemoveEstimateIDs(ids ...int) *ForecastUpdate {
	fu.mutation.RemoveEstimateIDs(ids...)
	return fu
}

// RemoveEstimates removes "estimates" edges to Estimate entities.
func (fu *ForecastUpdate) RemoveEstimates(e ...*Estimate) *ForecastUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.RemoveEstimateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *ForecastUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ForecastMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *ForecastUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *ForecastUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *ForecastUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *ForecastUpdate) check() error {
	if v, ok := fu.mutation.Title(); ok {
		if err := forecast.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Forecast.title": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Resolution(); ok {
		if err := forecast.ResolutionValidator(v); err != nil {
			return &ValidationError{Name: "resolution", err: fmt.Errorf(`ent: validator failed for field "Forecast.resolution": %w`, err)}
		}
	}
	return nil
}

func (fu *ForecastUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   forecast.Table,
			Columns: forecast.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: forecast.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Title(); ok {
		_spec.SetField(forecast.FieldTitle, field.TypeString, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(forecast.FieldDescription, field.TypeString, value)
	}
	if value, ok := fu.mutation.Created(); ok {
		_spec.SetField(forecast.FieldCreated, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Resolves(); ok {
		_spec.SetField(forecast.FieldResolves, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Closes(); ok {
		_spec.SetField(forecast.FieldCloses, field.TypeTime, value)
	}
	if fu.mutation.ClosesCleared() {
		_spec.ClearField(forecast.FieldCloses, field.TypeTime)
	}
	if value, ok := fu.mutation.Resolution(); ok {
		_spec.SetField(forecast.FieldResolution, field.TypeEnum, value)
	}
	if fu.mutation.EstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.EstimatesTable,
			Columns: []string{forecast.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estimate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedEstimatesIDs(); len(nodes) > 0 && !fu.mutation.EstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.EstimatesTable,
			Columns: []string{forecast.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estimate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.EstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.EstimatesTable,
			Columns: []string{forecast.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estimate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forecast.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// ForecastUpdateOne is the builder for updating a single Forecast entity.
type ForecastUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ForecastMutation
}

// SetTitle sets the "title" field.
func (fuo *ForecastUpdateOne) SetTitle(s string) *ForecastUpdateOne {
	fuo.mutation.SetTitle(s)
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *ForecastUpdateOne) SetDescription(s string) *ForecastUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableDescription(s *string) *ForecastUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// SetCreated sets the "created" field.
func (fuo *ForecastUpdateOne) SetCreated(t time.Time) *ForecastUpdateOne {
	fuo.mutation.SetCreated(t)
	return fuo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableCreated(t *time.Time) *ForecastUpdateOne {
	if t != nil {
		fuo.SetCreated(*t)
	}
	return fuo
}

// SetResolves sets the "resolves" field.
func (fuo *ForecastUpdateOne) SetResolves(t time.Time) *ForecastUpdateOne {
	fuo.mutation.SetResolves(t)
	return fuo
}

// SetCloses sets the "closes" field.
func (fuo *ForecastUpdateOne) SetCloses(t time.Time) *ForecastUpdateOne {
	fuo.mutation.SetCloses(t)
	return fuo
}

// SetNillableCloses sets the "closes" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableCloses(t *time.Time) *ForecastUpdateOne {
	if t != nil {
		fuo.SetCloses(*t)
	}
	return fuo
}

// ClearCloses clears the value of the "closes" field.
func (fuo *ForecastUpdateOne) ClearCloses() *ForecastUpdateOne {
	fuo.mutation.ClearCloses()
	return fuo
}

// SetResolution sets the "resolution" field.
func (fuo *ForecastUpdateOne) SetResolution(f forecast.Resolution) *ForecastUpdateOne {
	fuo.mutation.SetResolution(f)
	return fuo
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (fuo *ForecastUpdateOne) SetNillableResolution(f *forecast.Resolution) *ForecastUpdateOne {
	if f != nil {
		fuo.SetResolution(*f)
	}
	return fuo
}

// AddEstimateIDs adds the "estimates" edge to the Estimate entity by IDs.
func (fuo *ForecastUpdateOne) AddEstimateIDs(ids ...int) *ForecastUpdateOne {
	fuo.mutation.AddEstimateIDs(ids...)
	return fuo
}

// AddEstimates adds the "estimates" edges to the Estimate entity.
func (fuo *ForecastUpdateOne) AddEstimates(e ...*Estimate) *ForecastUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.AddEstimateIDs(ids...)
}

// Mutation returns the ForecastMutation object of the builder.
func (fuo *ForecastUpdateOne) Mutation() *ForecastMutation {
	return fuo.mutation
}

// ClearEstimates clears all "estimates" edges to the Estimate entity.
func (fuo *ForecastUpdateOne) ClearEstimates() *ForecastUpdateOne {
	fuo.mutation.ClearEstimates()
	return fuo
}

// RemoveEstimateIDs removes the "estimates" edge to Estimate entities by IDs.
func (fuo *ForecastUpdateOne) RemoveEstimateIDs(ids ...int) *ForecastUpdateOne {
	fuo.mutation.RemoveEstimateIDs(ids...)
	return fuo
}

// RemoveEstimates removes "estimates" edges to Estimate entities.
func (fuo *ForecastUpdateOne) RemoveEstimates(e ...*Estimate) *ForecastUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.RemoveEstimateIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *ForecastUpdateOne) Select(field string, fields ...string) *ForecastUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Forecast entity.
func (fuo *ForecastUpdateOne) Save(ctx context.Context) (*Forecast, error) {
	return withHooks[*Forecast, ForecastMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *ForecastUpdateOne) SaveX(ctx context.Context) *Forecast {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *ForecastUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *ForecastUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *ForecastUpdateOne) check() error {
	if v, ok := fuo.mutation.Title(); ok {
		if err := forecast.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Forecast.title": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Resolution(); ok {
		if err := forecast.ResolutionValidator(v); err != nil {
			return &ValidationError{Name: "resolution", err: fmt.Errorf(`ent: validator failed for field "Forecast.resolution": %w`, err)}
		}
	}
	return nil
}

func (fuo *ForecastUpdateOne) sqlSave(ctx context.Context) (_node *Forecast, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   forecast.Table,
			Columns: forecast.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: forecast.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Forecast.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, forecast.FieldID)
		for _, f := range fields {
			if !forecast.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != forecast.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Title(); ok {
		_spec.SetField(forecast.FieldTitle, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(forecast.FieldDescription, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Created(); ok {
		_spec.SetField(forecast.FieldCreated, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Resolves(); ok {
		_spec.SetField(forecast.FieldResolves, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Closes(); ok {
		_spec.SetField(forecast.FieldCloses, field.TypeTime, value)
	}
	if fuo.mutation.ClosesCleared() {
		_spec.ClearField(forecast.FieldCloses, field.TypeTime)
	}
	if value, ok := fuo.mutation.Resolution(); ok {
		_spec.SetField(forecast.FieldResolution, field.TypeEnum, value)
	}
	if fuo.mutation.EstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.EstimatesTable,
			Columns: []string{forecast.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estimate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedEstimatesIDs(); len(nodes) > 0 && !fuo.mutation.EstimatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.EstimatesTable,
			Columns: []string{forecast.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estimate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.EstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.EstimatesTable,
			Columns: []string{forecast.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estimate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Forecast{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forecast.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
