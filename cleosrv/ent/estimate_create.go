// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/estimate"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/forecast"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/probability"
)

// EstimateCreate is the builder for creating a Estimate entity.
type EstimateCreate struct {
	config
	mutation *EstimateMutation
	hooks    []Hook
}

// SetReason sets the "reason" field.
func (ec *EstimateCreate) SetReason(s string) *EstimateCreate {
	ec.mutation.SetReason(s)
	return ec
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableReason(s *string) *EstimateCreate {
	if s != nil {
		ec.SetReason(*s)
	}
	return ec
}

// SetCreated sets the "created" field.
func (ec *EstimateCreate) SetCreated(t time.Time) *EstimateCreate {
	ec.mutation.SetCreated(t)
	return ec
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (ec *EstimateCreate) SetNillableCreated(t *time.Time) *EstimateCreate {
	if t != nil {
		ec.SetCreated(*t)
	}
	return ec
}

// SetForecastID sets the "forecast" edge to the Forecast entity by ID.
func (ec *EstimateCreate) SetForecastID(id int) *EstimateCreate {
	ec.mutation.SetForecastID(id)
	return ec
}

// SetNillableForecastID sets the "forecast" edge to the Forecast entity by ID if the given value is not nil.
func (ec *EstimateCreate) SetNillableForecastID(id *int) *EstimateCreate {
	if id != nil {
		ec = ec.SetForecastID(*id)
	}
	return ec
}

// SetForecast sets the "forecast" edge to the Forecast entity.
func (ec *EstimateCreate) SetForecast(f *Forecast) *EstimateCreate {
	return ec.SetForecastID(f.ID)
}

// AddProbabilityIDs adds the "probabilities" edge to the Probability entity by IDs.
func (ec *EstimateCreate) AddProbabilityIDs(ids ...int) *EstimateCreate {
	ec.mutation.AddProbabilityIDs(ids...)
	return ec
}

// AddProbabilities adds the "probabilities" edges to the Probability entity.
func (ec *EstimateCreate) AddProbabilities(p ...*Probability) *EstimateCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddProbabilityIDs(ids...)
}

// Mutation returns the EstimateMutation object of the builder.
func (ec *EstimateCreate) Mutation() *EstimateMutation {
	return ec.mutation
}

// Save creates the Estimate in the database.
func (ec *EstimateCreate) Save(ctx context.Context) (*Estimate, error) {
	ec.defaults()
	return withHooks[*Estimate, EstimateMutation](ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EstimateCreate) SaveX(ctx context.Context) *Estimate {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EstimateCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EstimateCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EstimateCreate) defaults() {
	if _, ok := ec.mutation.Reason(); !ok {
		v := estimate.DefaultReason
		ec.mutation.SetReason(v)
	}
	if _, ok := ec.mutation.Created(); !ok {
		v := estimate.DefaultCreated()
		ec.mutation.SetCreated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EstimateCreate) check() error {
	if _, ok := ec.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "Estimate.reason"`)}
	}
	if v, ok := ec.mutation.Reason(); ok {
		if err := estimate.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "Estimate.reason": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Estimate.created"`)}
	}
	return nil
}

func (ec *EstimateCreate) sqlSave(ctx context.Context) (*Estimate, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EstimateCreate) createSpec() (*Estimate, *sqlgraph.CreateSpec) {
	var (
		_node = &Estimate{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: estimate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: estimate.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.Reason(); ok {
		_spec.SetField(estimate.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := ec.mutation.Created(); ok {
		_spec.SetField(estimate.FieldCreated, field.TypeTime, value)
		_node.Created = value
	}
	if nodes := ec.mutation.ForecastIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   estimate.ForecastTable,
			Columns: []string{estimate.ForecastColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: forecast.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.forecast_estimates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ProbabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   estimate.ProbabilitiesTable,
			Columns: []string{estimate.ProbabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: probability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EstimateCreateBulk is the builder for creating many Estimate entities in bulk.
type EstimateCreateBulk struct {
	config
	builders []*EstimateCreate
}

// Save creates the Estimate entities in the database.
func (ecb *EstimateCreateBulk) Save(ctx context.Context) ([]*Estimate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Estimate, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EstimateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EstimateCreateBulk) SaveX(ctx context.Context) []*Estimate {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EstimateCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EstimateCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
