// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/migrate"

	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/estimate"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/forecast"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/outcome"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/probability"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Estimate is the client for interacting with the Estimate builders.
	Estimate *EstimateClient
	// Forecast is the client for interacting with the Forecast builders.
	Forecast *ForecastClient
	// Outcome is the client for interacting with the Outcome builders.
	Outcome *OutcomeClient
	// Probability is the client for interacting with the Probability builders.
	Probability *ProbabilityClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Estimate = NewEstimateClient(c.config)
	c.Forecast = NewForecastClient(c.config)
	c.Outcome = NewOutcomeClient(c.config)
	c.Probability = NewProbabilityClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Estimate:    NewEstimateClient(cfg),
		Forecast:    NewForecastClient(cfg),
		Outcome:     NewOutcomeClient(cfg),
		Probability: NewProbabilityClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Estimate:    NewEstimateClient(cfg),
		Forecast:    NewForecastClient(cfg),
		Outcome:     NewOutcomeClient(cfg),
		Probability: NewProbabilityClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Estimate.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Estimate.Use(hooks...)
	c.Forecast.Use(hooks...)
	c.Outcome.Use(hooks...)
	c.Probability.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Estimate.Intercept(interceptors...)
	c.Forecast.Intercept(interceptors...)
	c.Outcome.Intercept(interceptors...)
	c.Probability.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *EstimateMutation:
		return c.Estimate.mutate(ctx, m)
	case *ForecastMutation:
		return c.Forecast.mutate(ctx, m)
	case *OutcomeMutation:
		return c.Outcome.mutate(ctx, m)
	case *ProbabilityMutation:
		return c.Probability.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// EstimateClient is a client for the Estimate schema.
type EstimateClient struct {
	config
}

// NewEstimateClient returns a client for the Estimate from the given config.
func NewEstimateClient(c config) *EstimateClient {
	return &EstimateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `estimate.Hooks(f(g(h())))`.
func (c *EstimateClient) Use(hooks ...Hook) {
	c.hooks.Estimate = append(c.hooks.Estimate, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `estimate.Intercept(f(g(h())))`.
func (c *EstimateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Estimate = append(c.inters.Estimate, interceptors...)
}

// Create returns a builder for creating a Estimate entity.
func (c *EstimateClient) Create() *EstimateCreate {
	mutation := newEstimateMutation(c.config, OpCreate)
	return &EstimateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Estimate entities.
func (c *EstimateClient) CreateBulk(builders ...*EstimateCreate) *EstimateCreateBulk {
	return &EstimateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Estimate.
func (c *EstimateClient) Update() *EstimateUpdate {
	mutation := newEstimateMutation(c.config, OpUpdate)
	return &EstimateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EstimateClient) UpdateOne(e *Estimate) *EstimateUpdateOne {
	mutation := newEstimateMutation(c.config, OpUpdateOne, withEstimate(e))
	return &EstimateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EstimateClient) UpdateOneID(id int) *EstimateUpdateOne {
	mutation := newEstimateMutation(c.config, OpUpdateOne, withEstimateID(id))
	return &EstimateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Estimate.
func (c *EstimateClient) Delete() *EstimateDelete {
	mutation := newEstimateMutation(c.config, OpDelete)
	return &EstimateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EstimateClient) DeleteOne(e *Estimate) *EstimateDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EstimateClient) DeleteOneID(id int) *EstimateDeleteOne {
	builder := c.Delete().Where(estimate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EstimateDeleteOne{builder}
}

// Query returns a query builder for Estimate.
func (c *EstimateClient) Query() *EstimateQuery {
	return &EstimateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEstimate},
		inters: c.Interceptors(),
	}
}

// Get returns a Estimate entity by its id.
func (c *EstimateClient) Get(ctx context.Context, id int) (*Estimate, error) {
	return c.Query().Where(estimate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EstimateClient) GetX(ctx context.Context, id int) *Estimate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryForecast queries the forecast edge of a Estimate.
func (c *EstimateClient) QueryForecast(e *Estimate) *ForecastQuery {
	query := (&ForecastClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, id),
			sqlgraph.To(forecast.Table, forecast.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, estimate.ForecastTable, estimate.ForecastColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProbabilities queries the probabilities edge of a Estimate.
func (c *EstimateClient) QueryProbabilities(e *Estimate) *ProbabilityQuery {
	query := (&ProbabilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estimate.Table, estimate.FieldID, id),
			sqlgraph.To(probability.Table, probability.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, estimate.ProbabilitiesTable, estimate.ProbabilitiesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EstimateClient) Hooks() []Hook {
	return c.hooks.Estimate
}

// Interceptors returns the client interceptors.
func (c *EstimateClient) Interceptors() []Interceptor {
	return c.inters.Estimate
}

func (c *EstimateClient) mutate(ctx context.Context, m *EstimateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EstimateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EstimateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EstimateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EstimateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Estimate mutation op: %q", m.Op())
	}
}

// ForecastClient is a client for the Forecast schema.
type ForecastClient struct {
	config
}

// NewForecastClient returns a client for the Forecast from the given config.
func NewForecastClient(c config) *ForecastClient {
	return &ForecastClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `forecast.Hooks(f(g(h())))`.
func (c *ForecastClient) Use(hooks ...Hook) {
	c.hooks.Forecast = append(c.hooks.Forecast, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `forecast.Intercept(f(g(h())))`.
func (c *ForecastClient) Intercept(interceptors ...Interceptor) {
	c.inters.Forecast = append(c.inters.Forecast, interceptors...)
}

// Create returns a builder for creating a Forecast entity.
func (c *ForecastClient) Create() *ForecastCreate {
	mutation := newForecastMutation(c.config, OpCreate)
	return &ForecastCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Forecast entities.
func (c *ForecastClient) CreateBulk(builders ...*ForecastCreate) *ForecastCreateBulk {
	return &ForecastCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Forecast.
func (c *ForecastClient) Update() *ForecastUpdate {
	mutation := newForecastMutation(c.config, OpUpdate)
	return &ForecastUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ForecastClient) UpdateOne(f *Forecast) *ForecastUpdateOne {
	mutation := newForecastMutation(c.config, OpUpdateOne, withForecast(f))
	return &ForecastUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ForecastClient) UpdateOneID(id int) *ForecastUpdateOne {
	mutation := newForecastMutation(c.config, OpUpdateOne, withForecastID(id))
	return &ForecastUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Forecast.
func (c *ForecastClient) Delete() *ForecastDelete {
	mutation := newForecastMutation(c.config, OpDelete)
	return &ForecastDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ForecastClient) DeleteOne(f *Forecast) *ForecastDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ForecastClient) DeleteOneID(id int) *ForecastDeleteOne {
	builder := c.Delete().Where(forecast.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ForecastDeleteOne{builder}
}

// Query returns a query builder for Forecast.
func (c *ForecastClient) Query() *ForecastQuery {
	return &ForecastQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeForecast},
		inters: c.Interceptors(),
	}
}

// Get returns a Forecast entity by its id.
func (c *ForecastClient) Get(ctx context.Context, id int) (*Forecast, error) {
	return c.Query().Where(forecast.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ForecastClient) GetX(ctx context.Context, id int) *Forecast {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEstimates queries the estimates edge of a Forecast.
func (c *ForecastClient) QueryEstimates(f *Forecast) *EstimateQuery {
	query := (&EstimateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(forecast.Table, forecast.FieldID, id),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, forecast.EstimatesTable, forecast.EstimatesColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ForecastClient) Hooks() []Hook {
	return c.hooks.Forecast
}

// Interceptors returns the client interceptors.
func (c *ForecastClient) Interceptors() []Interceptor {
	return c.inters.Forecast
}

func (c *ForecastClient) mutate(ctx context.Context, m *ForecastMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ForecastCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ForecastUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ForecastUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ForecastDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Forecast mutation op: %q", m.Op())
	}
}

// OutcomeClient is a client for the Outcome schema.
type OutcomeClient struct {
	config
}

// NewOutcomeClient returns a client for the Outcome from the given config.
func NewOutcomeClient(c config) *OutcomeClient {
	return &OutcomeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `outcome.Hooks(f(g(h())))`.
func (c *OutcomeClient) Use(hooks ...Hook) {
	c.hooks.Outcome = append(c.hooks.Outcome, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `outcome.Intercept(f(g(h())))`.
func (c *OutcomeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Outcome = append(c.inters.Outcome, interceptors...)
}

// Create returns a builder for creating a Outcome entity.
func (c *OutcomeClient) Create() *OutcomeCreate {
	mutation := newOutcomeMutation(c.config, OpCreate)
	return &OutcomeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Outcome entities.
func (c *OutcomeClient) CreateBulk(builders ...*OutcomeCreate) *OutcomeCreateBulk {
	return &OutcomeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Outcome.
func (c *OutcomeClient) Update() *OutcomeUpdate {
	mutation := newOutcomeMutation(c.config, OpUpdate)
	return &OutcomeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OutcomeClient) UpdateOne(o *Outcome) *OutcomeUpdateOne {
	mutation := newOutcomeMutation(c.config, OpUpdateOne, withOutcome(o))
	return &OutcomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OutcomeClient) UpdateOneID(id int) *OutcomeUpdateOne {
	mutation := newOutcomeMutation(c.config, OpUpdateOne, withOutcomeID(id))
	return &OutcomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Outcome.
func (c *OutcomeClient) Delete() *OutcomeDelete {
	mutation := newOutcomeMutation(c.config, OpDelete)
	return &OutcomeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OutcomeClient) DeleteOne(o *Outcome) *OutcomeDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OutcomeClient) DeleteOneID(id int) *OutcomeDeleteOne {
	builder := c.Delete().Where(outcome.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OutcomeDeleteOne{builder}
}

// Query returns a query builder for Outcome.
func (c *OutcomeClient) Query() *OutcomeQuery {
	return &OutcomeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOutcome},
		inters: c.Interceptors(),
	}
}

// Get returns a Outcome entity by its id.
func (c *OutcomeClient) Get(ctx context.Context, id int) (*Outcome, error) {
	return c.Query().Where(outcome.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OutcomeClient) GetX(ctx context.Context, id int) *Outcome {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProbabilities queries the probabilities edge of a Outcome.
func (c *OutcomeClient) QueryProbabilities(o *Outcome) *ProbabilityQuery {
	query := (&ProbabilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(outcome.Table, outcome.FieldID, id),
			sqlgraph.To(probability.Table, probability.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, outcome.ProbabilitiesTable, outcome.ProbabilitiesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OutcomeClient) Hooks() []Hook {
	return c.hooks.Outcome
}

// Interceptors returns the client interceptors.
func (c *OutcomeClient) Interceptors() []Interceptor {
	return c.inters.Outcome
}

func (c *OutcomeClient) mutate(ctx context.Context, m *OutcomeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OutcomeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OutcomeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OutcomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OutcomeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Outcome mutation op: %q", m.Op())
	}
}

// ProbabilityClient is a client for the Probability schema.
type ProbabilityClient struct {
	config
}

// NewProbabilityClient returns a client for the Probability from the given config.
func NewProbabilityClient(c config) *ProbabilityClient {
	return &ProbabilityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `probability.Hooks(f(g(h())))`.
func (c *ProbabilityClient) Use(hooks ...Hook) {
	c.hooks.Probability = append(c.hooks.Probability, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `probability.Intercept(f(g(h())))`.
func (c *ProbabilityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Probability = append(c.inters.Probability, interceptors...)
}

// Create returns a builder for creating a Probability entity.
func (c *ProbabilityClient) Create() *ProbabilityCreate {
	mutation := newProbabilityMutation(c.config, OpCreate)
	return &ProbabilityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Probability entities.
func (c *ProbabilityClient) CreateBulk(builders ...*ProbabilityCreate) *ProbabilityCreateBulk {
	return &ProbabilityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Probability.
func (c *ProbabilityClient) Update() *ProbabilityUpdate {
	mutation := newProbabilityMutation(c.config, OpUpdate)
	return &ProbabilityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProbabilityClient) UpdateOne(pr *Probability) *ProbabilityUpdateOne {
	mutation := newProbabilityMutation(c.config, OpUpdateOne, withProbability(pr))
	return &ProbabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProbabilityClient) UpdateOneID(id int) *ProbabilityUpdateOne {
	mutation := newProbabilityMutation(c.config, OpUpdateOne, withProbabilityID(id))
	return &ProbabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Probability.
func (c *ProbabilityClient) Delete() *ProbabilityDelete {
	mutation := newProbabilityMutation(c.config, OpDelete)
	return &ProbabilityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProbabilityClient) DeleteOne(pr *Probability) *ProbabilityDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProbabilityClient) DeleteOneID(id int) *ProbabilityDeleteOne {
	builder := c.Delete().Where(probability.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProbabilityDeleteOne{builder}
}

// Query returns a query builder for Probability.
func (c *ProbabilityClient) Query() *ProbabilityQuery {
	return &ProbabilityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProbability},
		inters: c.Interceptors(),
	}
}

// Get returns a Probability entity by its id.
func (c *ProbabilityClient) Get(ctx context.Context, id int) (*Probability, error) {
	return c.Query().Where(probability.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProbabilityClient) GetX(ctx context.Context, id int) *Probability {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEstimate queries the estimate edge of a Probability.
func (c *ProbabilityClient) QueryEstimate(pr *Probability) *EstimateQuery {
	query := (&EstimateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(probability.Table, probability.FieldID, id),
			sqlgraph.To(estimate.Table, estimate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, probability.EstimateTable, probability.EstimateColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOutcome queries the outcome edge of a Probability.
func (c *ProbabilityClient) QueryOutcome(pr *Probability) *OutcomeQuery {
	query := (&OutcomeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(probability.Table, probability.FieldID, id),
			sqlgraph.To(outcome.Table, outcome.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, probability.OutcomeTable, probability.OutcomeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProbabilityClient) Hooks() []Hook {
	return c.hooks.Probability
}

// Interceptors returns the client interceptors.
func (c *ProbabilityClient) Interceptors() []Interceptor {
	return c.inters.Probability
}

func (c *ProbabilityClient) mutate(ctx context.Context, m *ProbabilityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProbabilityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProbabilityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProbabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProbabilityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Probability mutation op: %q", m.Op())
	}
}
