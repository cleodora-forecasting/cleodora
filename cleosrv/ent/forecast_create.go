// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/estimate"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/forecast"
)

// ForecastCreate is the builder for creating a Forecast entity.
type ForecastCreate struct {
	config
	mutation *ForecastMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (fc *ForecastCreate) SetTitle(s string) *ForecastCreate {
	fc.mutation.SetTitle(s)
	return fc
}

// SetDescription sets the "description" field.
func (fc *ForecastCreate) SetDescription(s string) *ForecastCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableDescription(s *string) *ForecastCreate {
	if s != nil {
		fc.SetDescription(*s)
	}
	return fc
}

// SetCreated sets the "created" field.
func (fc *ForecastCreate) SetCreated(t time.Time) *ForecastCreate {
	fc.mutation.SetCreated(t)
	return fc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableCreated(t *time.Time) *ForecastCreate {
	if t != nil {
		fc.SetCreated(*t)
	}
	return fc
}

// SetResolves sets the "resolves" field.
func (fc *ForecastCreate) SetResolves(t time.Time) *ForecastCreate {
	fc.mutation.SetResolves(t)
	return fc
}

// SetCloses sets the "closes" field.
func (fc *ForecastCreate) SetCloses(t time.Time) *ForecastCreate {
	fc.mutation.SetCloses(t)
	return fc
}

// SetNillableCloses sets the "closes" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableCloses(t *time.Time) *ForecastCreate {
	if t != nil {
		fc.SetCloses(*t)
	}
	return fc
}

// SetResolution sets the "resolution" field.
func (fc *ForecastCreate) SetResolution(f forecast.Resolution) *ForecastCreate {
	fc.mutation.SetResolution(f)
	return fc
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (fc *ForecastCreate) SetNillableResolution(f *forecast.Resolution) *ForecastCreate {
	if f != nil {
		fc.SetResolution(*f)
	}
	return fc
}

// AddEstimateIDs adds the "estimates" edge to the Estimate entity by IDs.
func (fc *ForecastCreate) AddEstimateIDs(ids ...int) *ForecastCreate {
	fc.mutation.AddEstimateIDs(ids...)
	return fc
}

// AddEstimates adds the "estimates" edges to the Estimate entity.
func (fc *ForecastCreate) AddEstimates(e ...*Estimate) *ForecastCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fc.AddEstimateIDs(ids...)
}

// Mutation returns the ForecastMutation object of the builder.
func (fc *ForecastCreate) Mutation() *ForecastMutation {
	return fc.mutation
}

// Save creates the Forecast in the database.
func (fc *ForecastCreate) Save(ctx context.Context) (*Forecast, error) {
	fc.defaults()
	return withHooks[*Forecast, ForecastMutation](ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *ForecastCreate) SaveX(ctx context.Context) *Forecast {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *ForecastCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *ForecastCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *ForecastCreate) defaults() {
	if _, ok := fc.mutation.Description(); !ok {
		v := forecast.DefaultDescription
		fc.mutation.SetDescription(v)
	}
	if _, ok := fc.mutation.Created(); !ok {
		v := forecast.DefaultCreated()
		fc.mutation.SetCreated(v)
	}
	if _, ok := fc.mutation.Resolution(); !ok {
		v := forecast.DefaultResolution
		fc.mutation.SetResolution(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *ForecastCreate) check() error {
	if _, ok := fc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Forecast.title"`)}
	}
	if v, ok := fc.mutation.Title(); ok {
		if err := forecast.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Forecast.title": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Forecast.description"`)}
	}
	if _, ok := fc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Forecast.created"`)}
	}
	if _, ok := fc.mutation.Resolves(); !ok {
		return &ValidationError{Name: "resolves", err: errors.New(`ent: missing required field "Forecast.resolves"`)}
	}
	if _, ok := fc.mutation.Resolution(); !ok {
		return &ValidationError{Name: "resolution", err: errors.New(`ent: missing required field "Forecast.resolution"`)}
	}
	if v, ok := fc.mutation.Resolution(); ok {
		if err := forecast.ResolutionValidator(v); err != nil {
			return &ValidationError{Name: "resolution", err: fmt.Errorf(`ent: validator failed for field "Forecast.resolution": %w`, err)}
		}
	}
	return nil
}

func (fc *ForecastCreate) sqlSave(ctx context.Context) (*Forecast, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *ForecastCreate) createSpec() (*Forecast, *sqlgraph.CreateSpec) {
	var (
		_node = &Forecast{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: forecast.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: forecast.FieldID,
			},
		}
	)
	if value, ok := fc.mutation.Title(); ok {
		_spec.SetField(forecast.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.SetField(forecast.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fc.mutation.Created(); ok {
		_spec.SetField(forecast.FieldCreated, field.TypeTime, value)
		_node.Created = value
	}
	if value, ok := fc.mutation.Resolves(); ok {
		_spec.SetField(forecast.FieldResolves, field.TypeTime, value)
		_node.Resolves = value
	}
	if value, ok := fc.mutation.Closes(); ok {
		_spec.SetField(forecast.FieldCloses, field.TypeTime, value)
		_node.Closes = &value
	}
	if value, ok := fc.mutation.Resolution(); ok {
		_spec.SetField(forecast.FieldResolution, field.TypeEnum, value)
		_node.Resolution = value
	}
	if nodes := fc.mutation.EstimatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forecast.EstimatesTable,
			Columns: []string{forecast.EstimatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estimate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ForecastCreateBulk is the builder for creating many Forecast entities in bulk.
type ForecastCreateBulk struct {
	config
	builders []*ForecastCreate
}

// Save creates the Forecast entities in the database.
func (fcb *ForecastCreateBulk) Save(ctx context.Context) ([]*Forecast, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Forecast, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ForecastMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *ForecastCreateBulk) SaveX(ctx context.Context) []*Forecast {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *ForecastCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *ForecastCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
