// Code generated by ent, DO NOT EDIT.

package probability

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Probability {
	return predicate.Probability(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Probability {
	return predicate.Probability(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Probability {
	return predicate.Probability(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Probability {
	return predicate.Probability(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Probability {
	return predicate.Probability(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Probability {
	return predicate.Probability(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Probability {
	return predicate.Probability(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Probability {
	return predicate.Probability(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Probability {
	return predicate.Probability(sql.FieldLTE(FieldID, id))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v int) predicate.Probability {
	return predicate.Probability(sql.FieldEQ(FieldValue, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v int) predicate.Probability {
	return predicate.Probability(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v int) predicate.Probability {
	return predicate.Probability(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...int) predicate.Probability {
	return predicate.Probability(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...int) predicate.Probability {
	return predicate.Probability(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v int) predicate.Probability {
	return predicate.Probability(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v int) predicate.Probability {
	return predicate.Probability(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v int) predicate.Probability {
	return predicate.Probability(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v int) predicate.Probability {
	return predicate.Probability(sql.FieldLTE(FieldValue, v))
}

// HasEstimate applies the HasEdge predicate on the "estimate" edge.
func HasEstimate() predicate.Probability {
	return predicate.Probability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EstimateTable, EstimateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEstimateWith applies the HasEdge predicate on the "estimate" edge with a given conditions (other predicates).
func HasEstimateWith(preds ...predicate.Estimate) predicate.Probability {
	return predicate.Probability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EstimateInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EstimateTable, EstimateColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutcome applies the HasEdge predicate on the "outcome" edge.
func HasOutcome() predicate.Probability {
	return predicate.Probability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OutcomeTable, OutcomeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutcomeWith applies the HasEdge predicate on the "outcome" edge with a given conditions (other predicates).
func HasOutcomeWith(preds ...predicate.Outcome) predicate.Probability {
	return predicate.Probability(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OutcomeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OutcomeTable, OutcomeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Probability) predicate.Probability {
	return predicate.Probability(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Probability) predicate.Probability {
	return predicate.Probability(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Probability) predicate.Probability {
	return predicate.Probability(func(s *sql.Selector) {
		p(s.Not())
	})
}
