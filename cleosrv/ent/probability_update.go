// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/estimate"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/outcome"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/predicate"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/probability"
)

// ProbabilityUpdate is the builder for updating Probability entities.
type ProbabilityUpdate struct {
	config
	hooks    []Hook
	mutation *ProbabilityMutation
}

// Where appends a list predicates to the ProbabilityUpdate builder.
func (pu *ProbabilityUpdate) Where(ps ...predicate.Probability) *ProbabilityUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetValue sets the "value" field.
func (pu *ProbabilityUpdate) SetValue(i int) *ProbabilityUpdate {
	pu.mutation.ResetValue()
	pu.mutation.SetValue(i)
	return pu
}

// AddValue adds i to the "value" field.
func (pu *ProbabilityUpdate) AddValue(i int) *ProbabilityUpdate {
	pu.mutation.AddValue(i)
	return pu
}

// SetEstimateID sets the "estimate" edge to the Estimate entity by ID.
func (pu *ProbabilityUpdate) SetEstimateID(id int) *ProbabilityUpdate {
	pu.mutation.SetEstimateID(id)
	return pu
}

// SetNillableEstimateID sets the "estimate" edge to the Estimate entity by ID if the given value is not nil.
func (pu *ProbabilityUpdate) SetNillableEstimateID(id *int) *ProbabilityUpdate {
	if id != nil {
		pu = pu.SetEstimateID(*id)
	}
	return pu
}

// SetEstimate sets the "estimate" edge to the Estimate entity.
func (pu *ProbabilityUpdate) SetEstimate(e *Estimate) *ProbabilityUpdate {
	return pu.SetEstimateID(e.ID)
}

// SetOutcomeID sets the "outcome" edge to the Outcome entity by ID.
func (pu *ProbabilityUpdate) SetOutcomeID(id int) *ProbabilityUpdate {
	pu.mutation.SetOutcomeID(id)
	return pu
}

// SetNillableOutcomeID sets the "outcome" edge to the Outcome entity by ID if the given value is not nil.
func (pu *ProbabilityUpdate) SetNillableOutcomeID(id *int) *ProbabilityUpdate {
	if id != nil {
		pu = pu.SetOutcomeID(*id)
	}
	return pu
}

// SetOutcome sets the "outcome" edge to the Outcome entity.
func (pu *ProbabilityUpdate) SetOutcome(o *Outcome) *ProbabilityUpdate {
	return pu.SetOutcomeID(o.ID)
}

// Mutation returns the ProbabilityMutation object of the builder.
func (pu *ProbabilityUpdate) Mutation() *ProbabilityMutation {
	return pu.mutation
}

// ClearEstimate clears the "estimate" edge to the Estimate entity.
func (pu *ProbabilityUpdate) ClearEstimate() *ProbabilityUpdate {
	pu.mutation.ClearEstimate()
	return pu
}

// ClearOutcome clears the "outcome" edge to the Outcome entity.
func (pu *ProbabilityUpdate) ClearOutcome() *ProbabilityUpdate {
	pu.mutation.ClearOutcome()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProbabilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProbabilityMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProbabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProbabilityUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProbabilityUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProbabilityUpdate) check() error {
	if v, ok := pu.mutation.Value(); ok {
		if err := probability.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Probability.value": %w`, err)}
		}
	}
	return nil
}

func (pu *ProbabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   probability.Table,
			Columns: probability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: probability.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Value(); ok {
		_spec.SetField(probability.FieldValue, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedValue(); ok {
		_spec.AddField(probability.FieldValue, field.TypeInt, value)
	}
	if pu.mutation.EstimateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   probability.EstimateTable,
			Columns: []string{probability.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estimate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EstimateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   probability.EstimateTable,
			Columns: []string{probability.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estimate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OutcomeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   probability.OutcomeTable,
			Columns: []string{probability.OutcomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outcome.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OutcomeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   probability.OutcomeTable,
			Columns: []string{probability.OutcomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outcome.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{probability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProbabilityUpdateOne is the builder for updating a single Probability entity.
type ProbabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProbabilityMutation
}

// SetValue sets the "value" field.
func (puo *ProbabilityUpdateOne) SetValue(i int) *ProbabilityUpdateOne {
	puo.mutation.ResetValue()
	puo.mutation.SetValue(i)
	return puo
}

// AddValue adds i to the "value" field.
func (puo *ProbabilityUpdateOne) AddValue(i int) *ProbabilityUpdateOne {
	puo.mutation.AddValue(i)
	return puo
}

// SetEstimateID sets the "estimate" edge to the Estimate entity by ID.
func (puo *ProbabilityUpdateOne) SetEstimateID(id int) *ProbabilityUpdateOne {
	puo.mutation.SetEstimateID(id)
	return puo
}

// SetNillableEstimateID sets the "estimate" edge to the Estimate entity by ID if the given value is not nil.
func (puo *ProbabilityUpdateOne) SetNillableEstimateID(id *int) *ProbabilityUpdateOne {
	if id != nil {
		puo = puo.SetEstimateID(*id)
	}
	return puo
}

// SetEstimate sets the "estimate" edge to the Estimate entity.
func (puo *ProbabilityUpdateOne) SetEstimate(e *Estimate) *ProbabilityUpdateOne {
	return puo.SetEstimateID(e.ID)
}

// SetOutcomeID sets the "outcome" edge to the Outcome entity by ID.
func (puo *ProbabilityUpdateOne) SetOutcomeID(id int) *ProbabilityUpdateOne {
	puo.mutation.SetOutcomeID(id)
	return puo
}

// SetNillableOutcomeID sets the "outcome" edge to the Outcome entity by ID if the given value is not nil.
func (puo *ProbabilityUpdateOne) SetNillableOutcomeID(id *int) *ProbabilityUpdateOne {
	if id != nil {
		puo = puo.SetOutcomeID(*id)
	}
	return puo
}

// SetOutcome sets the "outcome" edge to the Outcome entity.
func (puo *ProbabilityUpdateOne) SetOutcome(o *Outcome) *ProbabilityUpdateOne {
	return puo.SetOutcomeID(o.ID)
}

// Mutation returns the ProbabilityMutation object of the builder.
func (puo *ProbabilityUpdateOne) Mutation() *ProbabilityMutation {
	return puo.mutation
}

// ClearEstimate clears the "estimate" edge to the Estimate entity.
func (puo *ProbabilityUpdateOne) ClearEstimate() *ProbabilityUpdateOne {
	puo.mutation.ClearEstimate()
	return puo
}

// ClearOutcome clears the "outcome" edge to the Outcome entity.
func (puo *ProbabilityUpdateOne) ClearOutcome() *ProbabilityUpdateOne {
	puo.mutation.ClearOutcome()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProbabilityUpdateOne) Select(field string, fields ...string) *ProbabilityUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Probability entity.
func (puo *ProbabilityUpdateOne) Save(ctx context.Context) (*Probability, error) {
	return withHooks[*Probability, ProbabilityMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProbabilityUpdateOne) SaveX(ctx context.Context) *Probability {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProbabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProbabilityUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProbabilityUpdateOne) check() error {
	if v, ok := puo.mutation.Value(); ok {
		if err := probability.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Probability.value": %w`, err)}
		}
	}
	return nil
}

func (puo *ProbabilityUpdateOne) sqlSave(ctx context.Context) (_node *Probability, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   probability.Table,
			Columns: probability.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: probability.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Probability.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, probability.FieldID)
		for _, f := range fields {
			if !probability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != probability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Value(); ok {
		_spec.SetField(probability.FieldValue, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedValue(); ok {
		_spec.AddField(probability.FieldValue, field.TypeInt, value)
	}
	if puo.mutation.EstimateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   probability.EstimateTable,
			Columns: []string{probability.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estimate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EstimateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   probability.EstimateTable,
			Columns: []string{probability.EstimateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estimate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OutcomeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   probability.OutcomeTable,
			Columns: []string{probability.OutcomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outcome.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OutcomeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   probability.OutcomeTable,
			Columns: []string{probability.OutcomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: outcome.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Probability{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{probability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
