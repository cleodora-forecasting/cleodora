// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/estimate"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/outcome"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/probability"
)

// Probability is the model entity for the Probability schema.
type Probability struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value int `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProbabilityQuery when eager-loading is set.
	Edges                  ProbabilityEdges `json:"edges"`
	estimate_probabilities *int
	outcome_probabilities  *int
}

// ProbabilityEdges holds the relations/edges for other nodes in the graph.
type ProbabilityEdges struct {
	// Estimate holds the value of the estimate edge.
	Estimate *Estimate `json:"estimate,omitempty"`
	// Outcome holds the value of the outcome edge.
	Outcome *Outcome `json:"outcome,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// EstimateOrErr returns the Estimate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProbabilityEdges) EstimateOrErr() (*Estimate, error) {
	if e.loadedTypes[0] {
		if e.Estimate == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: estimate.Label}
		}
		return e.Estimate, nil
	}
	return nil, &NotLoadedError{edge: "estimate"}
}

// OutcomeOrErr returns the Outcome value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProbabilityEdges) OutcomeOrErr() (*Outcome, error) {
	if e.loadedTypes[1] {
		if e.Outcome == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: outcome.Label}
		}
		return e.Outcome, nil
	}
	return nil, &NotLoadedError{edge: "outcome"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Probability) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case probability.FieldID, probability.FieldValue:
			values[i] = new(sql.NullInt64)
		case probability.ForeignKeys[0]: // estimate_probabilities
			values[i] = new(sql.NullInt64)
		case probability.ForeignKeys[1]: // outcome_probabilities
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Probability", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Probability fields.
func (pr *Probability) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case probability.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case probability.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				pr.Value = int(value.Int64)
			}
		case probability.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field estimate_probabilities", value)
			} else if value.Valid {
				pr.estimate_probabilities = new(int)
				*pr.estimate_probabilities = int(value.Int64)
			}
		case probability.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field outcome_probabilities", value)
			} else if value.Valid {
				pr.outcome_probabilities = new(int)
				*pr.outcome_probabilities = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEstimate queries the "estimate" edge of the Probability entity.
func (pr *Probability) QueryEstimate() *EstimateQuery {
	return NewProbabilityClient(pr.config).QueryEstimate(pr)
}

// QueryOutcome queries the "outcome" edge of the Probability entity.
func (pr *Probability) QueryOutcome() *OutcomeQuery {
	return NewProbabilityClient(pr.config).QueryOutcome(pr)
}

// Update returns a builder for updating this Probability.
// Note that you need to call Probability.Unwrap() before calling this method if this Probability
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Probability) Update() *ProbabilityUpdateOne {
	return NewProbabilityClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Probability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Probability) Unwrap() *Probability {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Probability is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Probability) String() string {
	var builder strings.Builder
	builder.WriteString("Probability(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", pr.Value))
	builder.WriteByte(')')
	return builder.String()
}

// Probabilities is a parsable slice of Probability.
type Probabilities []*Probability

func (pr Probabilities) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
