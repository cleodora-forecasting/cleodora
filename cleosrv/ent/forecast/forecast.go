// Code generated by ent, DO NOT EDIT.

package forecast

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the forecast type in the database.
	Label = "forecast"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldResolves holds the string denoting the resolves field in the database.
	FieldResolves = "resolves"
	// FieldCloses holds the string denoting the closes field in the database.
	FieldCloses = "closes"
	// FieldResolution holds the string denoting the resolution field in the database.
	FieldResolution = "resolution"
	// EdgeEstimates holds the string denoting the estimates edge name in mutations.
	EdgeEstimates = "estimates"
	// Table holds the table name of the forecast in the database.
	Table = "forecasts"
	// EstimatesTable is the table that holds the estimates relation/edge.
	EstimatesTable = "estimates"
	// EstimatesInverseTable is the table name for the Estimate entity.
	// It exists in this package in order to avoid circular dependency with the "estimate" package.
	EstimatesInverseTable = "estimates"
	// EstimatesColumn is the table column denoting the estimates relation/edge.
	EstimatesColumn = "forecast_estimates"
)

// Columns holds all SQL columns for forecast fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldCreated,
	FieldResolves,
	FieldCloses,
	FieldResolution,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated func() time.Time
)

// Resolution defines the type for the "resolution" enum field.
type Resolution string

// ResolutionUNRESOLVED is the default value of the Resolution enum.
const DefaultResolution = ResolutionUNRESOLVED

// Resolution values.
const (
	ResolutionUNRESOLVED     Resolution = "UNRESOLVED"
	ResolutionRESOLVED       Resolution = "RESOLVED"
	ResolutionNOT_APPLICABLE Resolution = "NOT_APPLICABLE"
)

func (r Resolution) String() string {
	return string(r)
}

// ResolutionValidator is a validator for the "resolution" field enum values. It is called by the builders before save.
func ResolutionValidator(r Resolution) error {
	switch r {
	case ResolutionUNRESOLVED, ResolutionRESOLVED, ResolutionNOT_APPLICABLE:
		return nil
	default:
		return fmt.Errorf("forecast: invalid enum value for resolution field: %q", r)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Resolution) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Resolution) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Resolution(str)
	if err := ResolutionValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Resolution", str)
	}
	return nil
}
