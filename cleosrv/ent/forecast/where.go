// Code generated by ent, DO NOT EDIT.

package forecast

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Forecast {
	return predicate.Forecast(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Forecast {
	return predicate.Forecast(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Forecast {
	return predicate.Forecast(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Forecast {
	return predicate.Forecast(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Forecast {
	return predicate.Forecast(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Forecast {
	return predicate.Forecast(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Forecast {
	return predicate.Forecast(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldDescription, v))
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldCreated, v))
}

// Resolves applies equality check predicate on the "resolves" field. It's identical to ResolvesEQ.
func Resolves(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldResolves, v))
}

// Closes applies equality check predicate on the "closes" field. It's identical to ClosesEQ.
func Closes(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldCloses, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Forecast {
	return predicate.Forecast(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Forecast {
	return predicate.Forecast(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Forecast {
	return predicate.Forecast(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Forecast {
	return predicate.Forecast(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Forecast {
	return predicate.Forecast(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldCreated, v))
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldNEQ(FieldCreated, v))
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldIn(FieldCreated, vs...))
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldNotIn(FieldCreated, vs...))
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldGT(FieldCreated, v))
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldGTE(FieldCreated, v))
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldLT(FieldCreated, v))
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldLTE(FieldCreated, v))
}

// ResolvesEQ applies the EQ predicate on the "resolves" field.
func ResolvesEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldResolves, v))
}

// ResolvesNEQ applies the NEQ predicate on the "resolves" field.
func ResolvesNEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldNEQ(FieldResolves, v))
}

// ResolvesIn applies the In predicate on the "resolves" field.
func ResolvesIn(vs ...time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldIn(FieldResolves, vs...))
}

// ResolvesNotIn applies the NotIn predicate on the "resolves" field.
func ResolvesNotIn(vs ...time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldNotIn(FieldResolves, vs...))
}

// ResolvesGT applies the GT predicate on the "resolves" field.
func ResolvesGT(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldGT(FieldResolves, v))
}

// ResolvesGTE applies the GTE predicate on the "resolves" field.
func ResolvesGTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldGTE(FieldResolves, v))
}

// ResolvesLT applies the LT predicate on the "resolves" field.
func ResolvesLT(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldLT(FieldResolves, v))
}

// ResolvesLTE applies the LTE predicate on the "resolves" field.
func ResolvesLTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldLTE(FieldResolves, v))
}

// ClosesEQ applies the EQ predicate on the "closes" field.
func ClosesEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldCloses, v))
}

// ClosesNEQ applies the NEQ predicate on the "closes" field.
func ClosesNEQ(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldNEQ(FieldCloses, v))
}

// ClosesIn applies the In predicate on the "closes" field.
func ClosesIn(vs ...time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldIn(FieldCloses, vs...))
}

// ClosesNotIn applies the NotIn predicate on the "closes" field.
func ClosesNotIn(vs ...time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldNotIn(FieldCloses, vs...))
}

// ClosesGT applies the GT predicate on the "closes" field.
func ClosesGT(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldGT(FieldCloses, v))
}

// ClosesGTE applies the GTE predicate on the "closes" field.
func ClosesGTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldGTE(FieldCloses, v))
}

// ClosesLT applies the LT predicate on the "closes" field.
func ClosesLT(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldLT(FieldCloses, v))
}

// ClosesLTE applies the LTE predicate on the "closes" field.
func ClosesLTE(v time.Time) predicate.Forecast {
	return predicate.Forecast(sql.FieldLTE(FieldCloses, v))
}

// ClosesIsNil applies the IsNil predicate on the "closes" field.
func ClosesIsNil() predicate.Forecast {
	return predicate.Forecast(sql.FieldIsNull(FieldCloses))
}

// ClosesNotNil applies the NotNil predicate on the "closes" field.
func ClosesNotNil() predicate.Forecast {
	return predicate.Forecast(sql.FieldNotNull(FieldCloses))
}

// ResolutionEQ applies the EQ predicate on the "resolution" field.
func ResolutionEQ(v Resolution) predicate.Forecast {
	return predicate.Forecast(sql.FieldEQ(FieldResolution, v))
}

// ResolutionNEQ applies the NEQ predicate on the "resolution" field.
func ResolutionNEQ(v Resolution) predicate.Forecast {
	return predicate.Forecast(sql.FieldNEQ(FieldResolution, v))
}

// ResolutionIn applies the In predicate on the "resolution" field.
func ResolutionIn(vs ...Resolution) predicate.Forecast {
	return predicate.Forecast(sql.FieldIn(FieldResolution, vs...))
}

// ResolutionNotIn applies the NotIn predicate on the "resolution" field.
func ResolutionNotIn(vs ...Resolution) predicate.Forecast {
	return predicate.Forecast(sql.FieldNotIn(FieldResolution, vs...))
}

// HasEstimates applies the HasEdge predicate on the "estimates" edge.
func HasEstimates() predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EstimatesTable, EstimatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEstimatesWith applies the HasEdge predicate on the "estimates" edge with a given conditions (other predicates).
func HasEstimatesWith(preds ...predicate.Estimate) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EstimatesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EstimatesTable, EstimatesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Forecast) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Forecast) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Forecast) predicate.Forecast {
	return predicate.Forecast(func(s *sql.Selector) {
		p(s.Not())
	})
}
