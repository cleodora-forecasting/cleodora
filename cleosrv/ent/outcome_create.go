// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/outcome"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/probability"
)

// OutcomeCreate is the builder for creating a Outcome entity.
type OutcomeCreate struct {
	config
	mutation *OutcomeMutation
	hooks    []Hook
}

// SetText sets the "text" field.
func (oc *OutcomeCreate) SetText(s string) *OutcomeCreate {
	oc.mutation.SetText(s)
	return oc
}

// SetCorrect sets the "correct" field.
func (oc *OutcomeCreate) SetCorrect(b bool) *OutcomeCreate {
	oc.mutation.SetCorrect(b)
	return oc
}

// SetNillableCorrect sets the "correct" field if the given value is not nil.
func (oc *OutcomeCreate) SetNillableCorrect(b *bool) *OutcomeCreate {
	if b != nil {
		oc.SetCorrect(*b)
	}
	return oc
}

// AddProbabilityIDs adds the "probabilities" edge to the Probability entity by IDs.
func (oc *OutcomeCreate) AddProbabilityIDs(ids ...int) *OutcomeCreate {
	oc.mutation.AddProbabilityIDs(ids...)
	return oc
}

// AddProbabilities adds the "probabilities" edges to the Probability entity.
func (oc *OutcomeCreate) AddProbabilities(p ...*Probability) *OutcomeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oc.AddProbabilityIDs(ids...)
}

// Mutation returns the OutcomeMutation object of the builder.
func (oc *OutcomeCreate) Mutation() *OutcomeMutation {
	return oc.mutation
}

// Save creates the Outcome in the database.
func (oc *OutcomeCreate) Save(ctx context.Context) (*Outcome, error) {
	oc.defaults()
	return withHooks[*Outcome, OutcomeMutation](ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OutcomeCreate) SaveX(ctx context.Context) *Outcome {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OutcomeCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OutcomeCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OutcomeCreate) defaults() {
	if _, ok := oc.mutation.Correct(); !ok {
		v := outcome.DefaultCorrect
		oc.mutation.SetCorrect(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OutcomeCreate) check() error {
	if _, ok := oc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "Outcome.text"`)}
	}
	if v, ok := oc.mutation.Text(); ok {
		if err := outcome.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Outcome.text": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Correct(); !ok {
		return &ValidationError{Name: "correct", err: errors.New(`ent: missing required field "Outcome.correct"`)}
	}
	return nil
}

func (oc *OutcomeCreate) sqlSave(ctx context.Context) (*Outcome, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OutcomeCreate) createSpec() (*Outcome, *sqlgraph.CreateSpec) {
	var (
		_node = &Outcome{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: outcome.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: outcome.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.Text(); ok {
		_spec.SetField(outcome.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := oc.mutation.Correct(); ok {
		_spec.SetField(outcome.FieldCorrect, field.TypeBool, value)
		_node.Correct = value
	}
	if nodes := oc.mutation.ProbabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outcome.ProbabilitiesTable,
			Columns: []string{outcome.ProbabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: probability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OutcomeCreateBulk is the builder for creating many Outcome entities in bulk.
type OutcomeCreateBulk struct {
	config
	builders []*OutcomeCreate
}

// Save creates the Outcome entities in the database.
func (ocb *OutcomeCreateBulk) Save(ctx context.Context) ([]*Outcome, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Outcome, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OutcomeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OutcomeCreateBulk) SaveX(ctx context.Context) []*Outcome {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OutcomeCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OutcomeCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
