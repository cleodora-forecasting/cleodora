// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (e *Estimate) Forecast(ctx context.Context) (*Forecast, error) {
	result, err := e.Edges.ForecastOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryForecast().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Estimate) Probabilities(ctx context.Context) (result []*Probability, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedProbabilities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.ProbabilitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryProbabilities().All(ctx)
	}
	return result, err
}

func (f *Forecast) Estimates(ctx context.Context) (result []*Estimate, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedEstimates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.EstimatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryEstimates().All(ctx)
	}
	return result, err
}

func (o *Outcome) Probabilities(ctx context.Context) (result []*Probability, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedProbabilities(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.ProbabilitiesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryProbabilities().All(ctx)
	}
	return result, err
}

func (pr *Probability) Estimate(ctx context.Context) (*Estimate, error) {
	result, err := pr.Edges.EstimateOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryEstimate().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Probability) Outcome(ctx context.Context) (*Outcome, error) {
	result, err := pr.Edges.OutcomeOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryOutcome().Only(ctx)
	}
	return result, MaskNotFound(err)
}
