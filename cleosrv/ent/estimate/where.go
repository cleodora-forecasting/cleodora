// Code generated by ent, DO NOT EDIT.

package estimate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Estimate {
	return predicate.Estimate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Estimate {
	return predicate.Estimate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Estimate {
	return predicate.Estimate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Estimate {
	return predicate.Estimate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Estimate {
	return predicate.Estimate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Estimate {
	return predicate.Estimate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Estimate {
	return predicate.Estimate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Estimate {
	return predicate.Estimate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Estimate {
	return predicate.Estimate(sql.FieldLTE(FieldID, id))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldEQ(FieldReason, v))
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Estimate {
	return predicate.Estimate(sql.FieldEQ(FieldCreated, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Estimate {
	return predicate.Estimate(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Estimate {
	return predicate.Estimate(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Estimate {
	return predicate.Estimate(sql.FieldContainsFold(FieldReason, v))
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Estimate {
	return predicate.Estimate(sql.FieldEQ(FieldCreated, v))
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Estimate {
	return predicate.Estimate(sql.FieldNEQ(FieldCreated, v))
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Estimate {
	return predicate.Estimate(sql.FieldIn(FieldCreated, vs...))
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Estimate {
	return predicate.Estimate(sql.FieldNotIn(FieldCreated, vs...))
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Estimate {
	return predicate.Estimate(sql.FieldGT(FieldCreated, v))
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Estimate {
	return predicate.Estimate(sql.FieldGTE(FieldCreated, v))
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Estimate {
	return predicate.Estimate(sql.FieldLT(FieldCreated, v))
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Estimate {
	return predicate.Estimate(sql.FieldLTE(FieldCreated, v))
}

// HasForecast applies the HasEdge predicate on the "forecast" edge.
func HasForecast() predicate.Estimate {
	return predicate.Estimate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ForecastTable, ForecastColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasForecastWith applies the HasEdge predicate on the "forecast" edge with a given conditions (other predicates).
func HasForecastWith(preds ...predicate.Forecast) predicate.Estimate {
	return predicate.Estimate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ForecastInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ForecastTable, ForecastColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProbabilities applies the HasEdge predicate on the "probabilities" edge.
func HasProbabilities() predicate.Estimate {
	return predicate.Estimate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProbabilitiesTable, ProbabilitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProbabilitiesWith applies the HasEdge predicate on the "probabilities" edge with a given conditions (other predicates).
func HasProbabilitiesWith(preds ...predicate.Probability) predicate.Estimate {
	return predicate.Estimate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProbabilitiesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProbabilitiesTable, ProbabilitiesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Estimate) predicate.Estimate {
	return predicate.Estimate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Estimate) predicate.Estimate {
	return predicate.Estimate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Estimate) predicate.Estimate {
	return predicate.Estimate(func(s *sql.Selector) {
		p(s.Not())
	})
}
