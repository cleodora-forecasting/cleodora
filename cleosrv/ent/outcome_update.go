// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/outcome"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/predicate"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/probability"
)

// OutcomeUpdate is the builder for updating Outcome entities.
type OutcomeUpdate struct {
	config
	hooks    []Hook
	mutation *OutcomeMutation
}

// Where appends a list predicates to the OutcomeUpdate builder.
func (ou *OutcomeUpdate) Where(ps ...predicate.Outcome) *OutcomeUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetText sets the "text" field.
func (ou *OutcomeUpdate) SetText(s string) *OutcomeUpdate {
	ou.mutation.SetText(s)
	return ou
}

// SetCorrect sets the "correct" field.
func (ou *OutcomeUpdate) SetCorrect(b bool) *OutcomeUpdate {
	ou.mutation.SetCorrect(b)
	return ou
}

// SetNillableCorrect sets the "correct" field if the given value is not nil.
func (ou *OutcomeUpdate) SetNillableCorrect(b *bool) *OutcomeUpdate {
	if b != nil {
		ou.SetCorrect(*b)
	}
	return ou
}

// AddProbabilityIDs adds the "probabilities" edge to the Probability entity by IDs.
func (ou *OutcomeUpdate) AddProbabilityIDs(ids ...int) *OutcomeUpdate {
	ou.mutation.AddProbabilityIDs(ids...)
	return ou
}

// AddProbabilities adds the "probabilities" edges to the Probability entity.
func (ou *OutcomeUpdate) AddProbabilities(p ...*Probability) *OutcomeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddProbabilityIDs(ids...)
}

// Mutation returns the OutcomeMutation object of the builder.
func (ou *OutcomeUpdate) Mutation() *OutcomeMutation {
	return ou.mutation
}

// ClearProbabilities clears all "probabilities" edges to the Probability entity.
func (ou *OutcomeUpdate) ClearProbabilities() *OutcomeUpdate {
	ou.mutation.ClearProbabilities()
	return ou
}

// RemoveProbabilityIDs removes the "probabilities" edge to Probability entities by IDs.
func (ou *OutcomeUpdate) RemoveProbabilityIDs(ids ...int) *OutcomeUpdate {
	ou.mutation.RemoveProbabilityIDs(ids...)
	return ou
}

// RemoveProbabilities removes "probabilities" edges to Probability entities.
func (ou *OutcomeUpdate) RemoveProbabilities(p ...*Probability) *OutcomeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemoveProbabilityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OutcomeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OutcomeMutation](ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OutcomeUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OutcomeUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OutcomeUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OutcomeUpdate) check() error {
	if v, ok := ou.mutation.Text(); ok {
		if err := outcome.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Outcome.text": %w`, err)}
		}
	}
	return nil
}

func (ou *OutcomeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   outcome.Table,
			Columns: outcome.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: outcome.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Text(); ok {
		_spec.SetField(outcome.FieldText, field.TypeString, value)
	}
	if value, ok := ou.mutation.Correct(); ok {
		_spec.SetField(outcome.FieldCorrect, field.TypeBool, value)
	}
	if ou.mutation.ProbabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outcome.ProbabilitiesTable,
			Columns: []string{outcome.ProbabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: probability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedProbabilitiesIDs(); len(nodes) > 0 && !ou.mutation.ProbabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outcome.ProbabilitiesTable,
			Columns: []string{outcome.ProbabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: probability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ProbabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outcome.ProbabilitiesTable,
			Columns: []string{outcome.ProbabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: probability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outcome.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OutcomeUpdateOne is the builder for updating a single Outcome entity.
type OutcomeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OutcomeMutation
}

// SetText sets the "text" field.
func (ouo *OutcomeUpdateOne) SetText(s string) *OutcomeUpdateOne {
	ouo.mutation.SetText(s)
	return ouo
}

// SetCorrect sets the "correct" field.
func (ouo *OutcomeUpdateOne) SetCorrect(b bool) *OutcomeUpdateOne {
	ouo.mutation.SetCorrect(b)
	return ouo
}

// SetNillableCorrect sets the "correct" field if the given value is not nil.
func (ouo *OutcomeUpdateOne) SetNillableCorrect(b *bool) *OutcomeUpdateOne {
	if b != nil {
		ouo.SetCorrect(*b)
	}
	return ouo
}

// AddProbabilityIDs adds the "probabilities" edge to the Probability entity by IDs.
func (ouo *OutcomeUpdateOne) AddProbabilityIDs(ids ...int) *OutcomeUpdateOne {
	ouo.mutation.AddProbabilityIDs(ids...)
	return ouo
}

// AddProbabilities adds the "probabilities" edges to the Probability entity.
func (ouo *OutcomeUpdateOne) AddProbabilities(p ...*Probability) *OutcomeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddProbabilityIDs(ids...)
}

// Mutation returns the OutcomeMutation object of the builder.
func (ouo *OutcomeUpdateOne) Mutation() *OutcomeMutation {
	return ouo.mutation
}

// ClearProbabilities clears all "probabilities" edges to the Probability entity.
func (ouo *OutcomeUpdateOne) ClearProbabilities() *OutcomeUpdateOne {
	ouo.mutation.ClearProbabilities()
	return ouo
}

// RemoveProbabilityIDs removes the "probabilities" edge to Probability entities by IDs.
func (ouo *OutcomeUpdateOne) RemoveProbabilityIDs(ids ...int) *OutcomeUpdateOne {
	ouo.mutation.RemoveProbabilityIDs(ids...)
	return ouo
}

// RemoveProbabilities removes "probabilities" edges to Probability entities.
func (ouo *OutcomeUpdateOne) RemoveProbabilities(p ...*Probability) *OutcomeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemoveProbabilityIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OutcomeUpdateOne) Select(field string, fields ...string) *OutcomeUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Outcome entity.
func (ouo *OutcomeUpdateOne) Save(ctx context.Context) (*Outcome, error) {
	return withHooks[*Outcome, OutcomeMutation](ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OutcomeUpdateOne) SaveX(ctx context.Context) *Outcome {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OutcomeUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OutcomeUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OutcomeUpdateOne) check() error {
	if v, ok := ouo.mutation.Text(); ok {
		if err := outcome.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Outcome.text": %w`, err)}
		}
	}
	return nil
}

func (ouo *OutcomeUpdateOne) sqlSave(ctx context.Context) (_node *Outcome, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   outcome.Table,
			Columns: outcome.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: outcome.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Outcome.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, outcome.FieldID)
		for _, f := range fields {
			if !outcome.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != outcome.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Text(); ok {
		_spec.SetField(outcome.FieldText, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Correct(); ok {
		_spec.SetField(outcome.FieldCorrect, field.TypeBool, value)
	}
	if ouo.mutation.ProbabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outcome.ProbabilitiesTable,
			Columns: []string{outcome.ProbabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: probability.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedProbabilitiesIDs(); len(nodes) > 0 && !ouo.mutation.ProbabilitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outcome.ProbabilitiesTable,
			Columns: []string{outcome.ProbabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: probability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ProbabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   outcome.ProbabilitiesTable,
			Columns: []string{outcome.ProbabilitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: probability.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Outcome{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outcome.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
