// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/cleodora-forecasting/cleodora/cleosrv/ent/outcome"
)

// Outcome is the model entity for the Outcome schema.
type Outcome struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Correct holds the value of the "correct" field.
	Correct bool `json:"correct,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OutcomeQuery when eager-loading is set.
	Edges OutcomeEdges `json:"edges"`
}

// OutcomeEdges holds the relations/edges for other nodes in the graph.
type OutcomeEdges struct {
	// Probabilities holds the value of the probabilities edge.
	Probabilities []*Probability `json:"probabilities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedProbabilities map[string][]*Probability
}

// ProbabilitiesOrErr returns the Probabilities value or an error if the edge
// was not loaded in eager-loading.
func (e OutcomeEdges) ProbabilitiesOrErr() ([]*Probability, error) {
	if e.loadedTypes[0] {
		return e.Probabilities, nil
	}
	return nil, &NotLoadedError{edge: "probabilities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Outcome) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case outcome.FieldCorrect:
			values[i] = new(sql.NullBool)
		case outcome.FieldID:
			values[i] = new(sql.NullInt64)
		case outcome.FieldText:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Outcome", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Outcome fields.
func (o *Outcome) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case outcome.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case outcome.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				o.Text = value.String
			}
		case outcome.FieldCorrect:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field correct", values[i])
			} else if value.Valid {
				o.Correct = value.Bool
			}
		}
	}
	return nil
}

// QueryProbabilities queries the "probabilities" edge of the Outcome entity.
func (o *Outcome) QueryProbabilities() *ProbabilityQuery {
	return NewOutcomeClient(o.config).QueryProbabilities(o)
}

// Update returns a builder for updating this Outcome.
// Note that you need to call Outcome.Unwrap() before calling this method if this Outcome
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Outcome) Update() *OutcomeUpdateOne {
	return NewOutcomeClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Outcome entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Outcome) Unwrap() *Outcome {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Outcome is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Outcome) String() string {
	var builder strings.Builder
	builder.WriteString("Outcome(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("text=")
	builder.WriteString(o.Text)
	builder.WriteString(", ")
	builder.WriteString("correct=")
	builder.WriteString(fmt.Sprintf("%v", o.Correct))
	builder.WriteByte(')')
	return builder.String()
}

// NamedProbabilities returns the Probabilities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Outcome) NamedProbabilities(name string) ([]*Probability, error) {
	if o.Edges.namedProbabilities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedProbabilities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Outcome) appendNamedProbabilities(name string, edges ...*Probability) {
	if o.Edges.namedProbabilities == nil {
		o.Edges.namedProbabilities = make(map[string][]*Probability)
	}
	if len(edges) == 0 {
		o.Edges.namedProbabilities[name] = []*Probability{}
	} else {
		o.Edges.namedProbabilities[name] = append(o.Edges.namedProbabilities[name], edges...)
	}
}

// Outcomes is a parsable slice of Outcome.
type Outcomes []*Outcome

func (o Outcomes) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
