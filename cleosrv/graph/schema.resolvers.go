package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/cleodora-forecasting/cleodora/cleosrv/ent"
	"github.com/cleodora-forecasting/cleodora/cleosrv/graph/generated"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Estimates is the resolver for the estimates field.
func (r *queryResolver) Estimates(ctx context.Context) ([]*ent.Estimate, error) {
	panic(fmt.Errorf("not implemented: Estimates - estimates"))
}

// Forecasts is the resolver for the forecasts field.
func (r *queryResolver) Forecasts(ctx context.Context) ([]*ent.Forecast, error) {
	return r.client.Forecast.Query().All(ctx)
}

// Outcomes is the resolver for the outcomes field.
func (r *queryResolver) Outcomes(ctx context.Context) ([]*ent.Outcome, error) {
	panic(fmt.Errorf("not implemented: Outcomes - outcomes"))
}

// Probabilities is the resolver for the probabilities field.
func (r *queryResolver) Probabilities(ctx context.Context) ([]*ent.Probability, error) {
	panic(fmt.Errorf("not implemented: Probabilities - probabilities"))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// CreateEstimateInput returns generated.CreateEstimateInputResolver implementation.
func (r *Resolver) CreateEstimateInput() generated.CreateEstimateInputResolver {
	return &createEstimateInputResolver{r}
}

// CreateProbabilityInput returns generated.CreateProbabilityInputResolver implementation.
func (r *Resolver) CreateProbabilityInput() generated.CreateProbabilityInputResolver {
	return &createProbabilityInputResolver{r}
}

type queryResolver struct{ *Resolver }
type createEstimateInputResolver struct{ *Resolver }
type createProbabilityInputResolver struct{ *Resolver }
