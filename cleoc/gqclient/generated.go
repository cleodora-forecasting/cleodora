// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gqclient

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// CreateEstimateInput is used for create Estimate object.
// Input was generated by ent.
type CreateEstimateInput struct {
	Reason         *string                  `json:"reason"`
	Created        *time.Time               `json:"created"`
	ForecastID     *string                  `json:"forecastID"`
	ProbabilityIDs []string                 `json:"probabilityIDs"`
	Probabilities  []CreateProbabilityInput `json:"probabilities"`
}

// GetReason returns CreateEstimateInput.Reason, and is useful for accessing the field via an interface.
func (v *CreateEstimateInput) GetReason() *string { return v.Reason }

// GetCreated returns CreateEstimateInput.Created, and is useful for accessing the field via an interface.
func (v *CreateEstimateInput) GetCreated() *time.Time { return v.Created }

// GetForecastID returns CreateEstimateInput.ForecastID, and is useful for accessing the field via an interface.
func (v *CreateEstimateInput) GetForecastID() *string { return v.ForecastID }

// GetProbabilityIDs returns CreateEstimateInput.ProbabilityIDs, and is useful for accessing the field via an interface.
func (v *CreateEstimateInput) GetProbabilityIDs() []string { return v.ProbabilityIDs }

// GetProbabilities returns CreateEstimateInput.Probabilities, and is useful for accessing the field via an interface.
func (v *CreateEstimateInput) GetProbabilities() []CreateProbabilityInput { return v.Probabilities }

// CreateForecastCreateForecast includes the requested fields of the GraphQL type Forecast.
type CreateForecastCreateForecast struct {
	Id string `json:"id"`
}

// GetId returns CreateForecastCreateForecast.Id, and is useful for accessing the field via an interface.
func (v *CreateForecastCreateForecast) GetId() string { return v.Id }

// CreateForecastInput is used for create Forecast object.
// Input was generated by ent.
type CreateForecastInput struct {
	Title       string              `json:"title"`
	Description *string             `json:"description"`
	Created     *time.Time          `json:"created"`
	Resolves    time.Time           `json:"resolves"`
	Closes      *time.Time          `json:"closes"`
	Resolution  *ForecastResolution `json:"resolution"`
	EstimateIDs []string            `json:"estimateIDs"`
}

// GetTitle returns CreateForecastInput.Title, and is useful for accessing the field via an interface.
func (v *CreateForecastInput) GetTitle() string { return v.Title }

// GetDescription returns CreateForecastInput.Description, and is useful for accessing the field via an interface.
func (v *CreateForecastInput) GetDescription() *string { return v.Description }

// GetCreated returns CreateForecastInput.Created, and is useful for accessing the field via an interface.
func (v *CreateForecastInput) GetCreated() *time.Time { return v.Created }

// GetResolves returns CreateForecastInput.Resolves, and is useful for accessing the field via an interface.
func (v *CreateForecastInput) GetResolves() time.Time { return v.Resolves }

// GetCloses returns CreateForecastInput.Closes, and is useful for accessing the field via an interface.
func (v *CreateForecastInput) GetCloses() *time.Time { return v.Closes }

// GetResolution returns CreateForecastInput.Resolution, and is useful for accessing the field via an interface.
func (v *CreateForecastInput) GetResolution() *ForecastResolution { return v.Resolution }

// GetEstimateIDs returns CreateForecastInput.EstimateIDs, and is useful for accessing the field via an interface.
func (v *CreateForecastInput) GetEstimateIDs() []string { return v.EstimateIDs }

// CreateForecastResponse is returned by CreateForecast on success.
type CreateForecastResponse struct {
	CreateForecast *CreateForecastCreateForecast `json:"createForecast"`
}

// GetCreateForecast returns CreateForecastResponse.CreateForecast, and is useful for accessing the field via an interface.
func (v *CreateForecastResponse) GetCreateForecast() *CreateForecastCreateForecast {
	return v.CreateForecast
}

// CreateOutcomeInput is used for create Outcome object.
// Input was generated by ent.
type CreateOutcomeInput struct {
	Text           string   `json:"text"`
	Correct        *bool    `json:"correct"`
	ProbabilityIDs []string `json:"probabilityIDs"`
}

// GetText returns CreateOutcomeInput.Text, and is useful for accessing the field via an interface.
func (v *CreateOutcomeInput) GetText() string { return v.Text }

// GetCorrect returns CreateOutcomeInput.Correct, and is useful for accessing the field via an interface.
func (v *CreateOutcomeInput) GetCorrect() *bool { return v.Correct }

// GetProbabilityIDs returns CreateOutcomeInput.ProbabilityIDs, and is useful for accessing the field via an interface.
func (v *CreateOutcomeInput) GetProbabilityIDs() []string { return v.ProbabilityIDs }

// CreateProbabilityInput is used for create Probability object.
// Input was generated by ent.
type CreateProbabilityInput struct {
	Value      int                `json:"value"`
	EstimateID *string            `json:"estimateID"`
	OutcomeID  *string            `json:"outcomeID"`
	Outcome    CreateOutcomeInput `json:"outcome"`
}

// GetValue returns CreateProbabilityInput.Value, and is useful for accessing the field via an interface.
func (v *CreateProbabilityInput) GetValue() int { return v.Value }

// GetEstimateID returns CreateProbabilityInput.EstimateID, and is useful for accessing the field via an interface.
func (v *CreateProbabilityInput) GetEstimateID() *string { return v.EstimateID }

// GetOutcomeID returns CreateProbabilityInput.OutcomeID, and is useful for accessing the field via an interface.
func (v *CreateProbabilityInput) GetOutcomeID() *string { return v.OutcomeID }

// GetOutcome returns CreateProbabilityInput.Outcome, and is useful for accessing the field via an interface.
func (v *CreateProbabilityInput) GetOutcome() CreateOutcomeInput { return v.Outcome }

// ForecastResolution is enum for the field resolution
type ForecastResolution string

const (
	ForecastResolutionUnresolved    ForecastResolution = "UNRESOLVED"
	ForecastResolutionResolved      ForecastResolution = "RESOLVED"
	ForecastResolutionNotApplicable ForecastResolution = "NOT_APPLICABLE"
)

// GetForecastsForecastsForecast includes the requested fields of the GraphQL type Forecast.
type GetForecastsForecastsForecast struct {
	Id          string             `json:"id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	Created     time.Time          `json:"created"`
	Closes      *time.Time         `json:"closes"`
	Resolves    time.Time          `json:"resolves"`
	Resolution  ForecastResolution `json:"resolution"`
}

// GetId returns GetForecastsForecastsForecast.Id, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetId() string { return v.Id }

// GetTitle returns GetForecastsForecastsForecast.Title, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetTitle() string { return v.Title }

// GetDescription returns GetForecastsForecastsForecast.Description, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetDescription() string { return v.Description }

// GetCreated returns GetForecastsForecastsForecast.Created, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetCreated() time.Time { return v.Created }

// GetCloses returns GetForecastsForecastsForecast.Closes, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetCloses() *time.Time { return v.Closes }

// GetResolves returns GetForecastsForecastsForecast.Resolves, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetResolves() time.Time { return v.Resolves }

// GetResolution returns GetForecastsForecastsForecast.Resolution, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetResolution() ForecastResolution { return v.Resolution }

// GetForecastsResponse is returned by GetForecasts on success.
type GetForecastsResponse struct {
	Forecasts []GetForecastsForecastsForecast `json:"forecasts"`
}

// GetForecasts returns GetForecastsResponse.Forecasts, and is useful for accessing the field via an interface.
func (v *GetForecastsResponse) GetForecasts() []GetForecastsForecastsForecast { return v.Forecasts }

// __CreateForecastInput is used internally by genqlient
type __CreateForecastInput struct {
	Forecast CreateForecastInput `json:"forecast"`
	Estimate CreateEstimateInput `json:"estimate"`
}

// GetForecast returns __CreateForecastInput.Forecast, and is useful for accessing the field via an interface.
func (v *__CreateForecastInput) GetForecast() CreateForecastInput { return v.Forecast }

// GetEstimate returns __CreateForecastInput.Estimate, and is useful for accessing the field via an interface.
func (v *__CreateForecastInput) GetEstimate() CreateEstimateInput { return v.Estimate }

func CreateForecast(
	ctx context.Context,
	client graphql.Client,
	forecast CreateForecastInput,
	estimate CreateEstimateInput,
) (*CreateForecastResponse, error) {
	req := &graphql.Request{
		OpName: "CreateForecast",
		Query: `
mutation CreateForecast ($forecast: CreateForecastInput!, $estimate: CreateEstimateInput!) {
	createForecast(forecast: $forecast, estimate: $estimate) {
		id
	}
}
`,
		Variables: &__CreateForecastInput{
			Forecast: forecast,
			Estimate: estimate,
		},
	}
	var err error

	var data CreateForecastResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetForecasts(
	ctx context.Context,
	client graphql.Client,
) (*GetForecastsResponse, error) {
	req := &graphql.Request{
		OpName: "GetForecasts",
		Query: `
query GetForecasts {
	forecasts {
		id
		title
		description
		created
		closes
		resolves
		resolution
	}
}
`,
	}
	var err error

	var data GetForecastsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
