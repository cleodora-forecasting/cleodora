// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gqclient

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// CreateForecastCreateForecast includes the requested fields of the GraphQL type Forecast.
// The GraphQL type's documentation follows.
//
// A prediction about the future.
type CreateForecastCreateForecast struct {
	Id string `json:"id"`
}

// GetId returns CreateForecastCreateForecast.Id, and is useful for accessing the field via an interface.
func (v *CreateForecastCreateForecast) GetId() string { return v.Id }

// CreateForecastResponse is returned by CreateForecast on success.
type CreateForecastResponse struct {
	CreateForecast CreateForecastCreateForecast `json:"createForecast"`
}

// GetCreateForecast returns CreateForecastResponse.CreateForecast, and is useful for accessing the field via an interface.
func (v *CreateForecastResponse) GetCreateForecast() CreateForecastCreateForecast {
	return v.CreateForecast
}

// GetForecastsForecastsForecast includes the requested fields of the GraphQL type Forecast.
// The GraphQL type's documentation follows.
//
// A prediction about the future.
type GetForecastsForecastsForecast struct {
	Id          string    `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Created     time.Time `json:"created"`
	// The point in time at which you no longer want to update your probability
	// estimates for the forecast. In most cases you won't need this. One example
	// where you might is when you want to predict the outcome of an exam. You may
	// want to set 'closes' to the time right before the exam starts, even though
	// 'resolves' is several weeks later (when the exam results are published). This
	// way your prediction history will only reflect your estimations before you
	// took the exam, which is something you may want (or not, in which case you
	// could simply not set 'closes').
	Closes *time.Time `json:"closes"`
	// The point in time at which you predict you will be able to resolve whether
	// how the forecast resolved.
	Resolves   time.Time  `json:"resolves"`
	Resolution Resolution `json:"resolution"`
}

// GetId returns GetForecastsForecastsForecast.Id, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetId() string { return v.Id }

// GetTitle returns GetForecastsForecastsForecast.Title, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetTitle() string { return v.Title }

// GetDescription returns GetForecastsForecastsForecast.Description, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetDescription() string { return v.Description }

// GetCreated returns GetForecastsForecastsForecast.Created, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetCreated() time.Time { return v.Created }

// GetCloses returns GetForecastsForecastsForecast.Closes, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetCloses() *time.Time { return v.Closes }

// GetResolves returns GetForecastsForecastsForecast.Resolves, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetResolves() time.Time { return v.Resolves }

// GetResolution returns GetForecastsForecastsForecast.Resolution, and is useful for accessing the field via an interface.
func (v *GetForecastsForecastsForecast) GetResolution() Resolution { return v.Resolution }

// GetForecastsResponse is returned by GetForecasts on success.
type GetForecastsResponse struct {
	Forecasts []GetForecastsForecastsForecast `json:"forecasts"`
}

// GetForecasts returns GetForecastsResponse.Forecasts, and is useful for accessing the field via an interface.
func (v *GetForecastsResponse) GetForecasts() []GetForecastsForecastsForecast { return v.Forecasts }

type NewEstimate struct {
	Reason        string           `json:"reason"`
	Probabilities []NewProbability `json:"probabilities"`
	// An optional date in the past when you created this estimate. This can be
	// useful for cases when you wrote it down on a piece of paper or when importing
	// from other software. When creating a new Forecast this value will be for
	// the first Estimate (which will get the same timestamp as the
	// Forecast.Created).
	Created *time.Time `json:"created"`
}

// GetReason returns NewEstimate.Reason, and is useful for accessing the field via an interface.
func (v *NewEstimate) GetReason() string { return v.Reason }

// GetProbabilities returns NewEstimate.Probabilities, and is useful for accessing the field via an interface.
func (v *NewEstimate) GetProbabilities() []NewProbability { return v.Probabilities }

// GetCreated returns NewEstimate.Created, and is useful for accessing the field via an interface.
func (v *NewEstimate) GetCreated() *time.Time { return v.Created }

type NewForecast struct {
	Title       string     `json:"title"`
	Description string     `json:"description"`
	Resolves    time.Time  `json:"resolves"`
	Closes      *time.Time `json:"closes"`
	// An optional date in the past when you created this forecast. This can be
	// useful for cases when you wrote it down on a piece of paper or when importing
	// from other software.
	Created *time.Time `json:"created"`
}

// GetTitle returns NewForecast.Title, and is useful for accessing the field via an interface.
func (v *NewForecast) GetTitle() string { return v.Title }

// GetDescription returns NewForecast.Description, and is useful for accessing the field via an interface.
func (v *NewForecast) GetDescription() string { return v.Description }

// GetResolves returns NewForecast.Resolves, and is useful for accessing the field via an interface.
func (v *NewForecast) GetResolves() time.Time { return v.Resolves }

// GetCloses returns NewForecast.Closes, and is useful for accessing the field via an interface.
func (v *NewForecast) GetCloses() *time.Time { return v.Closes }

// GetCreated returns NewForecast.Created, and is useful for accessing the field via an interface.
func (v *NewForecast) GetCreated() *time.Time { return v.Created }

type NewOutcome struct {
	Text string `json:"text"`
}

// GetText returns NewOutcome.Text, and is useful for accessing the field via an interface.
func (v *NewOutcome) GetText() string { return v.Text }

type NewProbability struct {
	Value   int        `json:"value"`
	Outcome NewOutcome `json:"outcome"`
}

// GetValue returns NewProbability.Value, and is useful for accessing the field via an interface.
func (v *NewProbability) GetValue() int { return v.Value }

// GetOutcome returns NewProbability.Outcome, and is useful for accessing the field via an interface.
func (v *NewProbability) GetOutcome() NewOutcome { return v.Outcome }

type Resolution string

const (
	ResolutionResolved      Resolution = "RESOLVED"
	ResolutionNotApplicable Resolution = "NOT_APPLICABLE"
	ResolutionUnresolved    Resolution = "UNRESOLVED"
)

// __CreateForecastInput is used internally by genqlient
type __CreateForecastInput struct {
	Forecast NewForecast `json:"forecast"`
	Estimate NewEstimate `json:"estimate"`
}

// GetForecast returns __CreateForecastInput.Forecast, and is useful for accessing the field via an interface.
func (v *__CreateForecastInput) GetForecast() NewForecast { return v.Forecast }

// GetEstimate returns __CreateForecastInput.Estimate, and is useful for accessing the field via an interface.
func (v *__CreateForecastInput) GetEstimate() NewEstimate { return v.Estimate }

func CreateForecast(
	ctx context.Context,
	client graphql.Client,
	forecast NewForecast,
	estimate NewEstimate,
) (*CreateForecastResponse, error) {
	req := &graphql.Request{
		OpName: "CreateForecast",
		Query: `
mutation CreateForecast ($forecast: NewForecast!, $estimate: NewEstimate!) {
	createForecast(forecast: $forecast, estimate: $estimate) {
		id
	}
}
`,
		Variables: &__CreateForecastInput{
			Forecast: forecast,
			Estimate: estimate,
		},
	}
	var err error

	var data CreateForecastResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetForecasts(
	ctx context.Context,
	client graphql.Client,
) (*GetForecastsResponse, error) {
	req := &graphql.Request{
		OpName: "GetForecasts",
		Query: `
query GetForecasts {
	forecasts {
		id
		title
		description
		created
		closes
		resolves
		resolution
	}
}
`,
	}
	var err error

	var data GetForecastsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
