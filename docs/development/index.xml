<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Cleodora Forecasting</title><link>https://cleodora.org/docs/development/</link><description>Recent content in Development on Cleodora Forecasting</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://cleodora.org/docs/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Dev Guidelines</title><link>https://cleodora.org/docs/development/dev-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cleodora.org/docs/development/dev-guidelines/</guid><description>Dev Guidelines # The following should be prioritized, in particular over feature completeness:
Long-term maintainability, including a high degree of automation and tests Easy setup and excellent &amp;lsquo;Getting Started&amp;rsquo; documentation for new contributors Simplicity of use Personal use and privacy When in doubt, new features will not be added. It&amp;rsquo;s better to do a few things, but do them very well.</description></item><item><title>Technology</title><link>https://cleodora.org/docs/development/technology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cleodora.org/docs/development/technology/</guid><description>Technology # I have a vague idea that the combination of a Go backend with a ReactJS frontend could work well.
Go makes it easy to create a single binary for different platforms I personally like Go React seems to be very popular and battle-tested If using Go, then Gin could be a good choice as a framework.
GraphQL instead of REST could be a design paradigm for the API consumed by the frontend.</description></item></channel></rss>