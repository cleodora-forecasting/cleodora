# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Query {
  forecasts: [Forecast!]!
  metadata: Metadata!
}

"""
A prediction about the future.
"""
type Forecast {
  id: ID!
  title: String!
  description: String!
  created: Time!

  """
  The point in time at which you predict you will be able to resolve whether
  how the forecast resolved.
  """
  resolves: Time!

  """
  The point in time at which you no longer want to update your probability
  estimates for the forecast. In most cases you won't need this. One example
  where you might is when you want to predict the outcome of an exam. You may
  want to set 'closes' to the time right before the exam starts, even though
  'resolves' is several weeks later (when the exam results are published). This
  way your prediction history will only reflect your estimations before you
  took the exam, which is something you may want (or not, in which case you
  could simply not set 'closes').
  """
  closes: Time
  resolution: Resolution!
  estimates: [Estimate]!
}

"""
A list of probabilities (one for each outcome) together with a timestamp and
an explanation why you made this estimate. Every time you change your mind
about a forecast you will create a new Estimate.
All probabilities always add up to 100.
"""
type Estimate {
  id: ID!
  created: Time!
  reason: String!
  probabilities: [Probability]!
}

"""
A number between 0 and 100 tied to a specific Outcome. It is always part of
an Estimate.
"""
type Probability {
  id: ID!
  value: Int!
  outcome: Outcome!
}

"""
The possible results of a forecast. In the simplest case you will only have
two outcomes: Yes and No.
"""
type Outcome {
  id: ID!
  text: String!
  correct: Boolean!
}

input NewForecast {
  title: String!
  description: String!
  resolves: Time!
  closes: Time
}

type Mutation {
  createForecast(input: NewForecast!): Forecast!
}

scalar Time

enum Resolution {
  RESOLVED
  NOT_APPLICABLE
  UNRESOLVED
}

"""
Information about the application itself e.g. the current version.
"""
type Metadata {
  version: String!
}
